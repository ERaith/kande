{"version":3,"sources":["assets/github-logo.svg","assets/gmail-logo.svg","assets/linkedin-logo.svg","assets/projectList.js","components/ProjectSnapshot.js","components/Projects.js","components/Navigation.js","components/About.js","components/Footer.js","components/Project.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","projectList","projects","title","routename","githuburl","liveSite","imageurl","description","about","text","url","challenges","wins","stack","stackBadges","Projects","project","to","pathname","info","class","src","className","id","map","ProjectSnapshot","Navigation","href","About","Footer","target","githubLogo","alt","gmailLogo","linkedinLogo","Project","props","find","location","includes","badge","item","App","basename","path","component","exact","Component","Boolean","window","hostname","match","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,2C,kMCA9BC,EAAc,CACzBC,SAAU,CACR,CACEC,MAAO,QACPC,UAAW,QACXC,UAAW,4CACXC,SAAU,GACVC,SACE,uGACFC,YAAa,CACXC,MAAO,CACLC,KACE,+9BACFC,IACE,wGAGJC,WAAY,CACVF,KAAM,CACJ,wEACA,uEACA,oBACA,oBAEFC,IACE,wGAEJE,KAAM,CACJH,KACE,0iBACFC,IACE,wGAEJG,MAAO,oBACPC,YAAa,CAAC,QAAS,kBAAmB,QAAS,gBAGvD,CACEZ,MAAO,qBACPC,UAAW,kBACXC,UAAW,gCACXC,SAAU,mCACVC,SACE,sGACFC,YAAa,CACXC,MAAO,CACLC,KACE,wYACFC,IACE,uGAGJC,WAAY,CACVF,KAAM,CACJ,kBACA,2CACA,wCACA,kEACA,0EAEFC,IACE,uGAEJE,KAAM,CACJH,KACE,2VACFC,IACE,uGAEJG,MAAO,oBACPC,YAAa,CACX,SACA,SACA,UACA,aACA,SACA,UACA,YAIN,CACEZ,MAAO,iBACPC,UAAW,gBACXC,UAAW,2CACXC,SAAU,2CACVC,SACE,sGACFC,YAAa,CACXC,MAAO,CACLC,KACE,wgBACFC,IACE,uGAGJC,WAAY,CACVF,KAAM,CACJ,0DACA,+CACA,4BACA,wDAEFC,IACE,uGAEJE,KAAM,CACJH,KACE,8WACFC,IACE,uGAEJG,MAAO,oBACPC,YAAa,CACX,UACA,SACA,SACA,WACA,WACA,UACA,UACA,SACA,aAIN,CACEZ,MAAO,uBACPC,UAAW,qBACXE,SACE,qEACFD,UAAW,gCACXE,SACE,sGACFC,YAAa,CACXC,MAAO,CACLC,KACE,kUACFC,IACE,uGAGJC,WAAY,CACVF,KAAM,CACJ,8DACA,wEACA,oFACA,kEACA,8CACA,qDACA,mEACA,+DACA,6DAEFC,IACE,uGAEJE,KAAM,CACJH,KACE,+NACFC,IACE,uGAEJG,MAAO,oBACPC,YAAa,CACX,oBACA,OACA,QACA,eACA,QACA,2BAIN,CACEZ,M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","file":"static/js/main.9b4a64c7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github-logo.e7ab06e1.svg\";","module.exports = __webpack_public_path__ + \"static/media/gmail-logo.185bfa52.svg\";","module.exports = __webpack_public_path__ + \"static/media/linkedin-logo.97ce31c8.svg\";","export const projectList = {\n  projects: [\n    {\n      title: \"VoteQ\",\n      routename: \"VoteQ\",\n      githuburl: \"https://github.com/QueueTheVote/Vote-Q-FE\",\n      liveSite: \"\",\n      imageurl:\n        \"https://user-images.githubusercontent.com/27719824/84600656-393e3080-ae38-11ea-9ef4-9e5076b49db2.png\",\n      description: {\n        about: {\n          text:\n            \"This application was developed over the course of 4 days. It is built with React and React-Bootstrap on the FrontEnd with a Scala BackEnd and PostgreSQL database. The app consumes the Google Civic Information API as well as the Google Maps API. The idea of the application was inspired by recent primary elections in states like Wisconsin and Georgia, which were characterized by long lines, large crowds, and lack of direction by government officials. The solution is to apply what restaurants do: establish a digital queue that notifies users their current position and estimated wait time, so they can show up to the voting center when the voting center is ready to receive them. In the context of the Black Lives Matter movement, the application hopes to assist voters to be prepared to overcome forms of voter suppression, while also providing a means to vote safely and efficiently during the Covid-19 pandemic, two forces that have disproportionately impacted the Black community. \",\n          url:\n            \"https://user-images.githubusercontent.com/27719824/84600656-393e3080-ae38-11ea-9ef4-9e5076b49db2.png\",\n        },\n\n        challenges: {\n          text: [\n            \"Work on a Team over 4 days to help create an app to help with Voting!\",\n            \"Help our Shadow contribute and dive in deep with the Tech Stack Used\",\n            \"Write clean code.\",\n            \"Use React Hooks.\",\n          ],\n          url:\n            \"https://user-images.githubusercontent.com/27719824/84600767-00528b80-ae39-11ea-8601-150ed9ba2a60.png\",\n        },\n        wins: {\n          text:\n            \"In future iterations of this application, our team hopes to incorporate a voting center portal, where voting centers will be able to manage their respective queues. We also hope to have web sockets and progressive web app functionality so that information remains up to date, while other information is cached in the event that a user does not have a stable internet connection.  Additionally, we hope to aggregate and embed all the available resources for voters into the application making it a one-stop shop for having a seamless voting experience.\",\n          url:\n            \"https://user-images.githubusercontent.com/27719824/84601684-5de9d680-ae3f-11ea-8829-dc560c944324.png\",\n        },\n        stack: \"stack description\",\n        stackBadges: [\"React\", \"React-Bootstrap\", \"Scala\", \"PostgreSQL\"],\n      },\n    },\n    {\n      title: \"Big Dogs Huge Paws\",\n      routename: \"BigDogsHugePaws\",\n      githuburl: \"https://github.com/ERaith/pmt\",\n      liveSite: \"https://www.bigdogshugepaws.com/\",\n      imageurl:\n        \"https://user-images.githubusercontent.com/6379500/86557047-3f44a000-bf12-11ea-99d4-45b40a1f4418.png\",\n      description: {\n        about: {\n          text:\n            \"Big Dogs Huge Paws is a website used by the Adoption rescue based in Denver Colorado. I had the opportunity to volunteer time as a FullStack Developer on their new website. My position and job was to improve the UX on mobile devices and the developer tools available to the team. Our overall team objective was to take an existing website that crashed completely and spin up a new website \",\n          url:\n            \"https://user-images.githubusercontent.com/6379500/86557047-3f44a000-bf12-11ea-99d4-45b40a1f4418.png\",\n        },\n\n        challenges: {\n          text: [\n            \"Improve Mobile \",\n            \"Work on coding in a professional setting\",\n            \"Learn GraphQL integration with Strapi\",\n            \"Use Apollo to connect relationships between GraphQL and Angular\",\n            \"Develop my understanding of Javascript using a Superscript(TypeScript)\",\n          ],\n          url:\n            \"https://user-images.githubusercontent.com/6379500/86557045-3e137300-bf12-11ea-8d4b-2c0c19701079.png\",\n        },\n        wins: {\n          text:\n            \"Jumping into a project with two other veteran software developers was intimidating at first especially when working with TypeScript for the first time. It took a bit to get comfortable with using Interfaces, but when I did it was magical. Every single portion of the code now explicitly stated what type is expected and what type is returned.  \",\n          url:\n            \"https://user-images.githubusercontent.com/6379500/86557042-3b188280-bf12-11ea-8b69-7d612b202696.png\",\n        },\n        stack: \"stack description\",\n        stackBadges: [\n          \"Strapi\",\n          \"Docker\",\n          \"Angular\",\n          \"TypeScript\",\n          \"Swiper\",\n          \"GraphQL\",\n          \"Apollo\",\n        ],\n      },\n    },\n    {\n      title: \"Root Directory\",\n      routename: \"RootDirectory\",\n      githuburl: \"https://github.com/root-directory/leaves\",\n      liveSite: \"https://root-directory-fe.herokuapp.com/\",\n      imageurl:\n        \"https://user-images.githubusercontent.com/6379500/86557421-4cae5a00-bf13-11ea-967b-07c0d065c4b2.png\",\n      description: {\n        about: {\n          text:\n            \"Root directory is a plant management application that allows the user to keep track of their watering dates, changes of locations, and overall keep their plant healthy. We use Plant Ai api to determine the type of plant uploaded and use this to confirm the identity of said plant. We provide alerts for the user based on upcoming watering dates. In the future, we are looking to add users, plant care suggestions based on user contributions.  We use MongoDB and Flask the backend and Express/Angular for our frontend.\",\n          url:\n            \"https://user-images.githubusercontent.com/6379500/86557421-4cae5a00-bf13-11ea-967b-07c0d065c4b2.png\",\n        },\n\n        challenges: {\n          text: [\n            \"          Learn Python, Flask, and  MongoDB as a BE Dev\",\n            \"Write clean code in Angular using Typescript\",\n            \"Implement NGRX in Angular\",\n            \"Use Bootstrap and SCSS to get the hang of things. :)\",\n          ],\n          url:\n            \"https://user-images.githubusercontent.com/6379500/86557052-410e6380-bf12-11ea-97e7-e674ff0e6584.png\",\n        },\n        wins: {\n          text:\n            \"This project won 3rd place at the Turing School of Design Demo Competition!  I loved hearing the great feedback on future iterations of the app and the app is still in progress. Next iteration: Users! I had a blast working with our group and learning Observables, subscribers, marble diagrams over the course of this project, and am excited to see where it goes. \",\n          url:\n            \"https://user-images.githubusercontent.com/6379500/86557055-423f9080-bf12-11ea-9fa9-a2d00c49c364.png\",\n        },\n        stack: \"stack description\",\n        stackBadges: [\n          \"MongoDB\",\n          \"Python\",\n          \"AWS S3\",\n          \"Unittest\",\n          \"TravisCi\",\n          \"Angular\",\n          \"Jasmine\",\n          \"Kharma\",\n          \"Express\",\n        ],\n      },\n    },\n    {\n      title: \"Pokemon Team Builder\",\n      routename: \"PokemonTeamBuilder\",\n      liveSite:\n        \"https://secret-sierra-69834.herokuapp.com/pokedex/team/team-rocket\",\n      githuburl: \"https://github.com/ERaith/pmt\",\n      imageurl:\n        \"https://user-images.githubusercontent.com/6379500/86557049-410e6380-bf12-11ea-9924-fed47e5f9072.png\",\n      description: {\n        about: {\n          text:\n            \"The app allows the user to choose which pokemon they want to have on their team and compare their defensive weaknesses to build a devastating team for competition. The user can sort the pokemon by name or type and save their chosen team for later. Local storage is used at the moment, however, a backend is coming soon!\",\n          url:\n            \"https://user-images.githubusercontent.com/6379500/86557049-410e6380-bf12-11ea-9924-fed47e5f9072.png\",\n        },\n\n        challenges: {\n          text: [\n            \"Write squeaky clean, well-refactored code using ES6 syntax.\",\n            \"Make informed design decisions to create a user-friendly application.\",\n            \"Keep state-based components to a minimum and leverage more functional components.\",\n            \"Use a modular architecture for your application file structure.\",\n            \"Think deeply about React Lifecycle Methods.\",\n            \"Use propTypes for every component receiving props.\",\n            \"Write tests for React components and asynchronous functionality.\",\n            \"Utilize Redux for providing props from a unified prop store.\",\n            \"Write full coverage tests for Redux actions and reducers.\",\n          ],\n          url:\n            \"https://user-images.githubusercontent.com/6379500/86557048-4075cd00-bf12-11ea-86d7-aea5f809b25b.png\",\n        },\n        wins: {\n          text:\n            \"What can I say? Its a pokemon pet project. It felt fun while I was making it and I still eagerly await updating it with Hooks, getting user login implemented, adding more statistics, and creating a simulated battle mode.\",\n          url:\n            \"https://user-images.githubusercontent.com/6379500/86557050-410e6380-bf12-11ea-853f-4e14579e1fa5.png\",\n        },\n        stack: \"stack description\",\n        stackBadges: [\n          \"       JavaScript\",\n          \"SASS\",\n          \"Redux\",\n          \"React Router\",\n          \"Jest \",\n          \"React Testing Library\",\n        ],\n      },\n    },\n    {\n      title: \"Rotten Tomatillos\",\n      routename: \"Rotten-Tomatillos\",\n      githuburl: \"https://github.com/edlsto/rotten-tomatillos\",\n      imageurl:\n        \"https://user-images.githubusercontent.com/6379500/79267871-16eb5f00-7e57-11ea-9b65-e49a9d4de1f6.png\",\n\n      description: {\n        about: {\n          text:\n            \"This project is a clone of Rotten Tomatoes website. The app allows the user to look through movies and add their ratings for a specific movie to the rest of the user base and save their own reviews for repeat viewing! Logged-in users can also delete and modify their own ratings. Once a user logs in, the movies are sorted from most recently rated to least recently rated, with the unrated movies at the bottom of the page. If the user is not logged in, he or she can still see average ratings for movies.\",\n          url:\n            \"https://user-images.githubusercontent.com/6379500/79272736-1951b700-7e5f-11ea-8416-26d2c39c0059.gif\",\n        },\n\n        challenges: {\n          text: [\n            \"Write squeaky clean, well refactored code using ES6 syntax.\",\n            \"Make informed design decisions to create a user-friendly application.\",\n            \"Keep state based components to a minimum and leverage more functional components.\",\n            \"Use a modular architecture for your application file structure.\",\n            \"Think deeply about React Lifecycle Methods.\",\n            \"Use propTypes for every component receiving props.\",\n            \"Write tests for React components and asynchronous functionality.\",\n            \"Utilize Redux for providing props from a unified prop store.\",\n            \"Write full coverage tests for Redux actions and reducers.\",\n          ],\n          url:\n            \"https://user-images.githubusercontent.com/6379500/79268460-0c7d9500-7e58-11ea-8f3b-80574dbbbfb6.png\",\n        },\n        wins: {\n          text:\n            \"This project utilized Redux and it changed my life. I love prop drilling as much as the next Dev, but having a global store is fantastic! The next iteration would be to transition over to React Hooks. I had a ton of fun working with this team and adhering to a strict agile workflow(as dry as that sounds). \",\n          url:\n            \"https://user-images.githubusercontent.com/6379500/79268559-31720800-7e58-11ea-8a56-7f7036e8ad34.png\",\n        },\n        stack: \"stack description\",\n        stackBadges: [\"JavaScript\", \"SCSS\", \"React\", \"Redux\", \"Jest\"],\n      },\n    },\n    {\n      title: \"VRAD\",\n      routename: \"VRAD\",\n      githuburl: \"https://github.com/ERaith/VRAD\",\n      imageurl:\n        \"https://user-images.githubusercontent.com/15935329/78082854-425b4d80-7371-11ea-928a-6370e2613481.png\",\n      description: {\n        about: {\n          text:\n            \"This project was bootstrapped with Create React App. It is a clone of airBnB where the user can view different areas of Denver and view house listings available for rent. The user has the option to favorite individual listings and refer back to those at a later date.\",\n          url:\n            \"https://user-images.githubusercontent.com/6379500/86557421-4cae5a00-bf13-11ea-967b-07c0d065c4b2.png\",\n        },\n\n        challenges: {\n          text: [\n            \"Write squeaky clean, well-refactored code using ES6 syntax.\",\n            \"Make informed design decisions to create a user-friendly application.\",\n            \"Keep state-based components to a minimum and leverage more functional components.\",\n            \"Use a modular architecture for your application file structure.\",\n            \"Think deeply about React Lifecycle Methods.\",\n            \"Become familiar with promises, nested fetch requests, and handling the UI based on acceptance of data.\",\n            \"Become familiar with routing and how to handle dynamic routes.\",\n            \"Use propTypes for every component receiving props.\",\n            \"Write tests for React components and some asynchronous functionality.\",\n            \"Create an app relying on clean code practices\",\n          ],\n          url:\n            \"https://user-images.githubusercontent.com/6379500/86557052-410e6380-bf12-11ea-97e7-e674ff0e6584.png\",\n        },\n        wins: {\n          text:\n            \"One of our earlier projects, but the first time we worked in React. This project relies on prop drilling and keeps the user data stored in Local Storage. I thoroughly enjoyed working with React Router and had a blast creating a little breadcrumb component from scratch!  \",\n          url:\n            \"https://user-images.githubusercontent.com/6379500/86557055-423f9080-bf12-11ea-9fa9-a2d00c49c364.png\",\n        },\n        stack: \"stack description\",\n        stackBadges: [\"Angular\", \"Strapi\", \"Docker\", \"TypeScript\", \"Apollo\"],\n      },\n    },\n  ],\n};\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport const Projects = ({\n  title,\n  githuburl,\n  imageurl,\n  project,\n  routename,\n}) => {\n  return (\n    <Link\n      to={{\n        pathname: `/projects/${routename}`,\n        info: { project },\n      }}\n    >\n      <div class=\"col s12 m12 l6 xl4 wrapper\">\n        <div class=\"overlay\">\n          <div class=\"content\">{title}</div>\n        </div>\n        <img class=\"responsive-img\" src={imageurl} />\n      </div>\n    </Link>\n  );\n};\n\nexport default Projects;\n","import React from \"react\";\nimport {projectList} from \"../assets/projectList\";\n\nimport ProjectSnapshot from './ProjectSnapshot.js'\n\nexport const Projects = () => {\n  const renderProjects = () => {\n    return projectList.projects.map((project)=>{\n      return (\n        <ProjectSnapshot \n          title= {project.title}\n          githuburl= {project.githuburl}\n          imageurl= {project.imageurl}\n          project = {project}\n          routename = {project.routename}\n        />\n      )\n    })\n  }\n  return  (\n    <div className = \"projects-container  grey \" id=\"projects\">\n      <div class=\"row\">\n      {renderProjects()}\n\n      </div>\n    </div>\n  )\n\n};\n\nexport default Projects;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Navigation = () => {\n  return (\n    <nav className=\"nav-wrapper grey darken-4 header-spacing\">\n      <div class=\"row\">\n        <div class=\"col s6 m6 l6\">\n          <h4>ERIK RAITH</h4>\n        </div>\n        <div class=\"col s6 m6 l6\">\n          <ul class=\"right hide-on-med-and-down\">\n            <li>\n              <a href=\"https://drive.google.com/file/d/1r5uF5ylc3iBMrDTMSyeQIgcYOZzRFVq6/view?usp=sharing\">Resume</a>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navigation;\n","import React from \"react\";\n\nexport const About = () => {\n  return (\n    <article className=\"about grey lighten-2 spacer\" id=\"about\">\n      <div className=\"row about-content\">\n\n        <div className=\"col s12 m4\">\n          <h4>FRONTEND DEVELOPER JAVASCRIPT</h4>\n        </div>\n        <div className=\"col s12 m6\">\n          <p>\n            Results-focused software developer with 3 solid years of experience\n            in data visualization and analytics. Enthralled in parsing large\n            datasets into actionable user-friendly results. Thrives in a\n            fast-paced agile environment and able to quickly assess problems and\n            find actionable solutions.\n          </p>\n        </div>\n      </div>\n    </article>\n  );\n};\n\nexport default About;\n","import React from \"react\";\nimport githubLogo from \"../assets/github-logo.svg\";\nimport gmailLogo from \"../assets/gmail-logo.svg\";\nimport linkedinLogo from \"../assets/linkedin-logo.svg\";\n// import turingLogo from \"../assets/turing-logo.png\";\n\nexport const Footer = () => {\n  return (\n    <footer class=\"page-footer\" id=\"contact\">\n      <div class=\"container\">\n        <div class=\"row\">\n          <div class=\"col l6 s12\">\n            <h5 class=\"white-text\">Get in Contact</h5>\n            <p class=\"grey-text text-lighten-4\">\n              I would love to help bring your next website to life!\n            </p>\n          </div>\n          <div class=\"col l4 offset-l2 s12\">\n            <a\n              class=\"waves-effect waves-light btn-large social github\"\n              href=\"https://github.com/ERaith\"\n              target=\"_blank\"\n            >\n              <img src={githubLogo} className=\"logo\" alt=\"github logo\" /> Find\n              me on github\n            </a>\n            <a class=\"waves-effect waves-light btn-large social google\">\n              <img src={gmailLogo} className=\"logo\" alt=\"gmail logo\" /> Get in\n              touch!\n            </a>\n            <a\n              class=\"waves-effect waves-light btn-large social linkedin\"\n              href=\"https://www.linkedin.com/in/erik-raith-8b441969/\"\n              target=\"_blank\"\n            >\n              <img src={linkedinLogo} className=\"logo\" alt=\"linkedin logo\" />\n              Connect to me on linkedin\n            </a>\n            {/* <a class=\"waves-effect waves-light btn-large social linkedin\">\n              <img src={turingLogo} className=\"logo\" alt=\"turing logo\" /> See my\n              Portfolio on Turing Alumms\n            </a> */}\n          </div>\n        </div>\n      </div>\n      <div class=\"footer-copyright\">\n        <div class=\"container\">© 2020 Erik Raith</div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport { projectList } from \"../assets/projectList\";\n\nexport const Project = (props) => {\n  const project = projectList.projects.find((project) => {\n    return props.location.pathname.includes(project.routename);\n  });\n\n  const { about, challenges, wins, stack, stackBadges } = project.description;\n\n  const renderBadges = () => {\n    const badgeHTML = stackBadges.map((badge) => {\n      return (\n        <span class=\"col-content s12 m12 l2 mb-2 white-text badge blue\">\n          {badge}\n        </span>\n      );\n    });\n    return badgeHTML;\n  };\n\n  const renderList = () => {\n    const list = challenges.text.map((item) => {\n      return <li>{item}</li>;\n    });\n    return list;\n  };\n\n  const renderProject = () => {\n    return (\n      <div className=\"grey lighten-2 spacer\" id=\"projects\">\n        <div class=\"row\">\n          <div class=\"col s12 m12 l7 p-5\">\n            <div class=\"row\">\n              <img class=\"responsive-img\" src={about.url}></img>\n            </div>\n            <div class=\"row\">\n              <img class=\"responsive-img\" src={challenges.url}></img>\n            </div>\n            <div class=\"row\">\n              <img class=\"responsive-img\" src={wins.url}></img>\n            </div>\n          </div>\n          <div class=\"col s12 m12 l5 p-2\">\n            <div class=\"row\">\n              <h3 class=\"\">{project.title}</h3>\n              <div class=\"col s12 m12 l12 \">\n                Github Link: <a href={project.githuburl}>{project.githuburl}</a>\n              </div>\n              <div class=\"col s12 m12 l12 \">\n                Live Link: <a href={project.liveSite}>{project.liveSite}</a>\n              </div>\n              <div class=\"col s12 m12 l12 \">{renderBadges()}</div>\n            </div>\n\n            <div class=\"row\">\n              <p>\n                <strong>Description</strong>\n              </p>\n              <p>{about.text}</p>\n            </div>\n            <div class=\"row\">\n              <p>\n                <strong>Challenges</strong>\n              </p>\n\n              <ul>{renderList()}</ul>\n            </div>\n            <div class=\"row\">\n              <p>\n                <strong>Wins</strong>\n              </p>\n\n              <p>{wins.text}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n  return renderProject();\n};\n\nexport default Project;\n","import React, { Component } from \"react\";\nimport Projects from \"./components/Projects\";\nimport Navigation from \"./components/Navigation\";\nimport Hero from \"./components/Hero\";\nimport About from \"./components/About\";\nimport Footer from \"./components/Footer\";\nimport Project from \"./components/Project\";\nimport \"./App.scss\";\nimport { BrowserRouter as Router, Route, HashRouter } from \"react-router-dom\";\nexport default class App extends Component {\n  render() {\n    return (\n      <HashRouter basename = \"/\">\n        <Route path=\"/\" component={Navigation}/>\n        {/* <Route exact path=\"/\" component={Hero}/> */}\n        <Route exact path=\"/\" component={About}/>\n        <Route exact path=\"/\" component={Projects}/>\n        <Route exact path=\"/projects/:id\" component={Project}/>\n        <Route path=\"/\" component={Footer}/>\n\n      </HashRouter>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/application.scss'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.Fragment>\n      <App />\n    </React.Fragment>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}